/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.dylmay.JLox;

import com.dylmay.JLox.Lexer.Lexer;
import com.dylmay.JLox.Parser.Parser;
import com.dylmay.JLox.Visitors.AstPrinter;
import com.dylmay.JLox.Visitors.Printer;
import com.dylmay.JLox.Visitors.RPNPrinter;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Optional;

public class Lox {
  private static final LoxErrorHandler ERR_HNDLR = LoxErrorHandler.getInstance("LoxMain");
  private static Printer parser = new AstPrinter();

  private static final int GOOD_EXIT = 0;
  private static final int HELP_EXIT = 64;
  private static final int EXC_EXIT = 65;

  private Lox() {}

  public static void main(String[] args) {
    switch (args.length) {
      case 1 -> Lox.runFile(args[0]);
      case 0 -> Lox.runPrompt();
      default -> {
        Lox.outputLine("Usage: jlox [script]");
        Lox.exit(HELP_EXIT);
      }
    }

    if (ERR_HNDLR.hasError()) {
      exit(EXC_EXIT);
    } else {
      exit(GOOD_EXIT);
    }
  }

  public static void runFile(String path) {
    try {
      byte[] bytes = Files.readAllBytes(Paths.get(path));
      runLox(new String(bytes, Charset.defaultCharset()));
    } catch (IOException exc) {
      ERR_HNDLR.createError("Exception occured when reading file. Exiting.").error(exc).report();
    }
  }

  private static void runLox(String src) {
    var tokens = new Lexer(src).scanTokens();
    if (LoxErrorHandler.getInstance(Lexer.class).hasError()) return;

    var expr = new Parser(tokens).parse();
    if (LoxErrorHandler.getInstance(Parser.class).hasError()) return;

    if (expr.isPresent()) {
      System.out.println(parser.traverse(expr.get()));
    }
  }

  public static void runPrompt() {
    printWelcome();

    try (var input = new InputStreamReader(System.in);
        var reader = new BufferedReader(input)) {
      while (true) {
        System.out.print("> ");
        var response = Optional.ofNullable(reader.readLine());

        if (response.isEmpty() || response.get().isBlank()) continue;

        String line = response.get().trim();

        Lox.outputLine(line);

        if (line.charAt(0) == '.') {
          parseCommand(line.substring(1));
        } else {
          runLox(line);
        }

        resetAll();
      }
    } catch (IOException exc) {
      ERR_HNDLR.createError("Exception occurred when reading prompt. Exiting.").error(exc).report();
    }
  }

  private static void printWelcome() {
    System.out.println("""
      Welcome to Lox v0.2.
      Type ".help" for more information.""");
  }

  private static void printHelp() {
    System.out.println(
        """
      -------------------------
      -     LoxJava REPL      -
      -------------------------
      | .help - Display help  |
      | .exit - Exit program  |
      | .prsr - Change parser |
      -------------------------""");
  }

  private static void parseCommand(String cmd) {
    var args = cmd.toLowerCase().split(" ");
    var choice = args[0];

    if (choice.equals("help")) {
      printHelp();
    } else if (cmd.equals("exit")) {
      exit(GOOD_EXIT);
    } else if (choice.equals("prsr")) {
      if (args.length == 2) {
        int selection;

        try {
          selection = Integer.valueOf(args[1]);
        } catch (NumberFormatException exc) {
          selection = -1;
        }

        if (selection == 1) {
          Lox.parser = new AstPrinter();
        } else if (selection == 2) {
          Lox.parser = new RPNPrinter();
        } else {
          Lox.outputLine("Unknown selection: " + args[1]);
          return;
        }

        Lox.outputLine("Selected parser: " + Lox.parser.name());

      } else {
        Lox.outputLine("Current parser: " + Lox.parser.name());
        Lox.outputLine(
            """
            Parser selection: .prsr {parserNumber}
            Available parsers:
              1. AstPrinter
              2. RPNPrinter
            """);
      }
    } else {
      Lox.outputLine("Unknown command ." + choice);
    }
  }

  private static void exit(int exitCode) {
    System.exit(exitCode);
  }

  private static void outputLine(String line) {
    Lox.output(line + "\n");
  }

  private static void output(String text) {
    System.out.print(text);
  }

  private static void resetAll() {
    ERR_HNDLR.reset();
    LoxErrorHandler.getInstance(Parser.class).reset();
    LoxErrorHandler.getInstance(Lexer.class).reset();
  }
}
