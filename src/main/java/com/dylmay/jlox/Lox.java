/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.dylmay.jlox;

import com.dylmay.jlox.error.ErrorMessage;
import com.dylmay.jlox.error.LoxErrorHandler;
import com.dylmay.jlox.interpretor.Interpreter;
import com.dylmay.jlox.lexer.Lexer;
import com.dylmay.jlox.parser.Parser;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;

public class Lox {
  private static final LoxErrorHandler ERR_HNDLR = LoxErrorHandler.getInstance("LoxMain");
  private static final Interpreter interpreter = new Interpreter();

  private static final int GOOD_EXIT = 0;
  private static final int HELP_EXIT = 64;
  private static final int EXC_EXIT = 65;
  private static final int INTERPRET_FAIL_EXIT = 70;

  private Lox() {}

  public static void main(String[] args) {
    switch (args.length) {
      case 0 -> Lox.runPrompt();
      case 1 -> Lox.runFile(args[0]);
      default -> {
        Lox.outputLine("Usage: jlox [script]");
        Lox.exit(HELP_EXIT);
      }
    }

    if (ERR_HNDLR.hasError()) {
      exit(EXC_EXIT);
    } else if (LoxErrorHandler.getInstance(Interpreter.class).hasError()) {
      exit(INTERPRET_FAIL_EXIT);
    } else {
      exit(GOOD_EXIT);
    }
  }

  public static void runFile(String path) {
    try {
      byte[] bytes = Files.readAllBytes(Paths.get(path));
      runLox(new String(bytes, Charset.defaultCharset()));

    } catch (IOException exc) {
      ERR_HNDLR.report(
          new ErrorMessage()
              .message("Exception occurred when reading file. Exiting.")
              .exception(exc));
    }
  }

  private static void runLox(String src) {
    var tokens = new Lexer(src).scanTokens();
    if (LoxErrorHandler.getInstance(Lexer.class).hasError()) return;

    var expr = new Parser(tokens).parse();
    if (LoxErrorHandler.getInstance(Parser.class).hasError()) return;

    interpreter.interpret(expr);
  }

  public static void runPrompt() {
    printWelcome();

    try (var input = new InputStreamReader(System.in);
        var reader = new BufferedReader(input)) {

      int depth = 0;
      StringBuilder text = new StringBuilder();

      while (true) {
        var response = Lox.promptUser(reader);

        if (response.isBlank()) continue;

        if (Lox.isCommand(response)) {
          parseCommand(response.substring(1));
          continue;
        }

        var finalChar = response.charAt(response.length() - 1);

        text.append(response);

        if (finalChar == '{') {
          depth++;
        } else if (finalChar == '}') {
          depth = Math.max(depth - 1, 0);
        } else {
          text.append(";");
        }

        text.append('\n');

        if (depth == 0) {
          runLox(text.toString());
          text = new StringBuilder();
        }

        resetAll();
      }
    } catch (IOException exc) {
      ERR_HNDLR.report(
          new ErrorMessage()
              .message("Exception occurred when reading prompt. Exiting.")
              .exception(exc));
    }
  }

  private static String promptUser(BufferedReader reader) throws IOException {
    System.out.print("> ");

    var response = reader.readLine();

    return response != null ? response.trim() : "";
  }

  private static boolean isCommand(String str) {
    return str.charAt(0) == '.';
  }

  private static void printWelcome() {
    System.out.println("""
      Welcome to Lox v0.2.
      Type ".help" for more information.""");
  }

  private static void printHelp() {
    System.out.println(
        """
      -------------------------
      -     LoxJava REPL      -
      -------------------------
      | .help - Display help  |
      | .exit - Exit program  |
      -------------------------""");
  }

  private static void parseCommand(String cmd) {
    var args = cmd.toLowerCase().split(" ");
    var choice = args[0];

    if (choice.equals("help")) {
      printHelp();
    } else if (cmd.equals("exit")) {
      exit(GOOD_EXIT);
    } else {
      Lox.outputLine("Unknown command ." + choice);
    }
  }

  private static void exit(int exitCode) {
    System.exit(exitCode);
  }

  private static void outputLine(String line) {
    Lox.output(line + "\n");
  }

  private static void output(String text) {
    System.out.print(text);
  }

  private static void resetAll() {
    ERR_HNDLR.reset();
    LoxErrorHandler.getInstance(Parser.class).reset();
    LoxErrorHandler.getInstance(Lexer.class).reset();
  }
}
